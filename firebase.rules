rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for clarity
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwnerOfProfile(profileId) {
      return isSignedIn() && request.auth.uid == profileId;
    }
    function isOwnerOfEvent(eventId) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/sos_events/$(eventId)).data.user_uid;
    }
    function getCircleIdForEvent(eventId) {
      return get(/databases/$(database)/documents/sos_events/$(eventId)).data.circle_id;
    }
    function isMemberOfCircle(circleId) {
      return isSignedIn() && exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
    }
    function isMemberOfCircleForEvent(eventId) {
      return isMemberOfCircle(getCircleIdForEvent(eventId));
    }

    // A user can only read and write their own profile
    match /profiles/{profileId} {
      allow read, write: if isOwnerOfProfile(profileId);
    }

    // A user can create an SOS event. Only the owner or a circle member can read it.
    // Only the owner can update it to 'resolved'.
    match /sos_events/{eventId} {
      allow create: if isSignedIn();
      allow read: if isOwnerOfEvent(eventId) || isMemberOfCircleForEvent(eventId);
      allow update: if isOwnerOfEvent(eventId) && request.resource.data.status == 'resolved';
    }

    // A user can manage their own push subscriptions
    match /push_subscriptions/{subId} {
      allow read, write: if isSignedIn() && request.auth.uid == resource.data.user_uid;
    }

    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}